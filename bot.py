import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError

from config import BOT_TOKEN, ADMIN_IDS
from database import AsyncSessionLocal, init_db
from models import User, UserRole, Property, PropertyStatus
from states import AddProperty

from functools import wraps
from aiogram.types import Message, CallbackQuery

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ---
def admin_only(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        tg_id = event.from_user.id if isinstance(event, (Message, CallbackQuery)) else None
        if tg_id not in ADMIN_IDS:
            if isinstance(event, Message):
                await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            elif isinstance(event, CallbackQuery):
                await event.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
            return
        return await handler(event, *args, **kwargs)
    return wrapper

# --- –ú–µ–Ω—é ---
def admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="admin_add")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]
    ])

@dp.message(F.text == "/menu")
@admin_only
async def show_admin_menu(message: Message):
    await message.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

@dp.callback_query(F.data == "admin_back")
@admin_only
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

@dp.callback_query(F.data == "admin_users")
@admin_only
async def show_users(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(User.role != UserRole.admin)
        result = await session.execute(stmt)
        users = result.scalars().all()

    if not users:
        text = "üôÅ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n" + "\n".join(
            [f"‚Ä¢ `{user.tg_id}` ‚Äì {user.role.value}" for user in users]
        )

    await callback.answer()
    await callback.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=admin_menu())

# --- /start ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(User.tg_id == tg_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user:
            role = UserRole.admin if tg_id in ADMIN_IDS else UserRole.user
            new_user = User(tg_id=tg_id, role=role)
            session.add(new_user)
            try:
                await session.commit()
            except IntegrityError:
                await session.rollback()
            await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ *{role.value}*.",
                                 reply_markup=admin_menu() if role == UserRole.admin else None)
        else:
            await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                                 reply_markup=admin_menu() if user.role == UserRole.admin else None)

# --- /help ---
@dp.message(F.text == "/help")
async def show_help(message: Message):
    await message.answer(
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/menu ‚Äî –∞–¥–º–∏–Ω-–º–µ–Ω—é (–µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω)\n"
        "/add_object ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode=ParseMode.MARKDOWN
    )

# --- FSM —à–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ---
@dp.message(F.text == "/add_object")
async def start_add_property(message: Message, state: FSMContext):
    await state.set_state(AddProperty.location)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=ReplyKeyboardRemove())

@dp.message(AddProperty.location)
async def step_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(AddProperty.description)
    await message.answer("üõè –ö–æ–º–Ω–∞—Ç—ã/—ç—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å:")

@dp.message(AddProperty.description)
async def step_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProperty.condition)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=txt)] for txt in ["–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç", "–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞", "–ö–æ—Ä–æ–±–∫–∞"]],
        resize_keyboard=True)
    await message.answer("üß± –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=keyboard)

@dp.message(AddProperty.condition)
async def step_condition(message: Message, state: FSMContext):
    await state.update_data(condition=message.text)
    await state.set_state(AddProperty.parking)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=txt)] for txt in ["–ü–æ–¥–∑–µ–º–Ω—ã–π", "–ù–∞–∑–µ–º–Ω—ã–π", "–ù–µ—Ç"]],
        resize_keyboard=True)
    await message.answer("üöó –ü–∞—Ä–∫–æ–≤–∫–∞:", reply_markup=keyboard)

@dp.message(AddProperty.parking)
async def step_parking(message: Message, state: FSMContext):
    await state.update_data(parking=message.text)
    await state.set_state(AddProperty.bathrooms)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=str(i))] for i in range(1, 6)],
        resize_keyboard=True)
    await message.answer("üöΩ –ö–æ–ª-–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:", reply_markup=keyboard)

@dp.message(AddProperty.bathrooms)
async def step_bathrooms(message: Message, state: FSMContext):
    await state.update_data(bathrooms=message.text)
    await state.set_state(AddProperty.additions)
    await message.answer("‚úè –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())

@dp.message(AddProperty.additions)
async def step_additions(message: Message, state: FSMContext):
    await state.update_data(additions=message.text)
    await state.set_state(AddProperty.price)
    await message.answer("üí∞ –¶–µ–Ω–∞:")

@dp.message(AddProperty.price)
async def step_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    data = await state.get_data()

    text = "*–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–∞:*\n"
    if data.get("location"): text += f"üìç {data['location']}\n"
    if data.get("description"): text += f"üõè {data['description']}\n"
    if data.get("condition"): text += f"üß± {data['condition']}\n"
    if data.get("parking"): text += f"üöó {data['parking']}\n"
    if data.get("bathrooms"): text += f"üöΩ {data['bathrooms']}\n"
    if data.get("additions"): text += f"‚úè {data['additions']}\n"
    if data.get("price"): text += f"üí∞ *{data['price']}*"

    await state.set_state(AddProperty.confirm)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_object")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_object")]
    ])
    await message.answer(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)

@dp.callback_query(F.data == "save_object")
async def confirm_save(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async with AsyncSessionLocal() as session:
        try:
            obj = Property(
                created_by=callback.from_user.id,
                location=data.get("location"),
                description=data.get("description"),
                condition=data.get("condition"),
                parking=data.get("parking"),
                bathrooms=int(data.get("bathrooms")) if data.get("bathrooms") else None,
                additions=data.get("additions"),
                price=data.get("price"),
                status=PropertyStatus.available
            )
            session.add(obj)
            await session.commit()
            await callback.message.edit_text("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except SQLAlchemyError:
            await session.rollback()
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.")
        finally:
            await state.clear()

@dp.callback_query(F.data == "cancel_object")
async def cancel_add(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    async def main():
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        import models  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
        await init_db()
        await dp.start_polling(bot)

    asyncio.run(main())
