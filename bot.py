import asyncio
from functools import wraps

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from config import BOT_TOKEN, ADMIN_IDS
from database import AsyncSessionLocal, init_db
from models import User, UserRole

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)

# üîí –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ ADMIN_IDS
def admin_only(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        tg_id = event.from_user.id if isinstance(event, (Message, CallbackQuery)) else None
        if tg_id not in ADMIN_IDS:
            if isinstance(event, Message):
                await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            elif isinstance(event, CallbackQuery):
                await event.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
            return
        return await handler(event, *args, **kwargs)
    return wrapper

# üëã –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    session = AsyncSessionLocal()

    stmt = select(User).where(User.tg_id == tg_id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if not user:
        role = UserRole.admin if tg_id in ADMIN_IDS else UserRole.user
        new_user = User(tg_id=tg_id, role=role)
        session.add(new_user)
        try:
            await session.commit()
        except IntegrityError:
            await session.rollback()
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ *{role.value}*.",
            reply_markup=admin_menu() if role == UserRole.admin else None
        )
    else:
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=admin_menu() if user.role == UserRole.admin else None
        )

    await session.close()

# üõ† –ö–Ω–æ–ø–æ—á–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
def admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.message(F.text == "/menu")
@admin_only
async def show_admin_menu(message: Message):
    await message.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@dp.callback_query(F.data == "admin_users")
@admin_only
async def show_users(callback: types.CallbackQuery):
    session = AsyncSessionLocal()

    stmt = select(User).where(User.role != UserRole.admin)
    result = await session.execute(stmt)
    users = result.scalars().all()

    if not users:
        text = "üôÅ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n" + "\n".join(
            [f"‚Ä¢ `{user.tg_id}` ‚Äì {user.role.value}" for user in users]
        )

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])

    await callback.answer()
    await callback.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=back_keyboard)
    await session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "admin_back")
@admin_only
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    async def main():
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await init_db()
        await dp.start_polling(bot)

    asyncio.run(main())
