import asyncio
from functools import wraps
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import select, delete
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
import logging

from config import BOT_TOKEN, ADMIN_IDS, CHANNEL_USERNAME
from database import AsyncSessionLocal, init_db
from models import User, UserRole, Property, PropertyStatus
from states import AddProperty, EditProperty

logging.basicConfig(level=logging.INFO)
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)

# ---------- DECORATOR ----------
def admin_only(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        tg_id = event.from_user.id
        if tg_id not in ADMIN_IDS:
            if isinstance(event, types.CallbackQuery):
                await event.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
            else:
                await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        return await handler(event, *args, **kwargs)
    return wrapper

# ---------- MENUS ----------
def admin_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton(text="üè† –í—Å–µ –æ–±—ä–µ–∫—Ç—ã", callback_data="admin_properties")],
        [InlineKeyboardButton(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="admin_add")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]
    ])

def property_actions(property_id: int, is_admin: bool = False) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_property_{property_id}")]]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_property_{property_id}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_objects" if not is_admin else "admin_properties")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ---------- /START ----------
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalar_one_or_none()

        if not user:
            role = UserRole.admin if tg_id in ADMIN_IDS else UserRole.user
            session.add(User(tg_id=tg_id, role=role))
            try:
                await session.commit()
            except IntegrityError:
                await session.rollback()

            await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ *{role.value}*.\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π /add_object –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ /my_objects –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.",
                                parse_mode="Markdown")
        else:
            await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π /add_object –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ /my_objects –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.",
                                parse_mode="Markdown")

        if tg_id in ADMIN_IDS:
            await message.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

# ---------- ADMIN MENU ----------
@dp.message(F.text == "/menu")
@admin_only
async def show_admin_menu(message: types.Message):
    await message.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

@dp.callback_query(F.data == "admin_back")
@admin_only
async def callback_menu(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_menu())

# ---------- USER LIST ----------
@dp.callback_query(F.data == "admin_users")
@admin_only
async def callback_users(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        users = (await session.execute(select(User))).scalars().all()

    text = "üôÅ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." if not users else \
        "üìã *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n" + "\n".join(f"‚Ä¢ `{u.tg_id}` ‚Äì {u.role.value}" for u in users)

    await callback.answer()
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=admin_menu())

# ---------- PROPERTY LIST (USER) ----------
@dp.message(F.text == "/my_objects")
async def my_objects(message: types.Message):
    tg_id = message.from_user.id
    async with AsyncSessionLocal() as session:
        properties = (await session.execute(select(Property).where(Property.created_by == tg_id))).scalars().all()

    if not properties:
        await message.answer("üôÅ –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add_object.")
        return

    for prop in properties:
        text = (
            f"*–û–±—ä–µ–∫—Ç #{prop.id}*\n"
            f"üìç {prop.location}\n"
            f"üõè {prop.description}\n"
            f"üß± {prop.condition}\n"
            f"üöó {prop.parking}\n"
            f"üöΩ {prop.bathrooms}\n"
            f"‚úè {prop.additions}\n"
            f"üí∞ *{prop.price}*"
        )
        await message.answer(text, parse_mode="Markdown", reply_markup=property_actions(prop.id))

# ---------- PROPERTY LIST (ADMIN) ----------
@dp.callback_query(F.data == "admin_properties")
@admin_only
async def admin_properties(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        properties = (await session.execute(select(Property))).scalars().all()

    if not properties:
        await callback.message.edit_text("üôÅ –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤.", reply_markup=admin_menu())
        return

    for prop in properties:
        text = (
            f"*–û–±—ä–µ–∫—Ç #{prop.id}* (—Å–æ–∑–¥–∞–ª: `{prop.created_by}`)\n"
            f"üìç {prop.location}\n"
            f"üõè {prop.description}\n"
            f"üß± {prop.condition}\n"
            f"üöó {prop.parking}\n"
            f"üöΩ {prop.bathrooms}\n"
            f"‚úè {prop.additions}\n"
            f"üí∞ *{prop.price}*"
        )
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=property_actions(prop.id, is_admin=True))
    await callback.answer()

# ---------- ADD OBJECT ----------
@dp.message(F.text == "/add_object")
async def start_add_property(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.tg_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
    await state.clear()
    await state.set_state(AddProperty.location)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=ReplyKeyboardRemove())

@dp.message(AddProperty.location)
async def step_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text, media=[])
    await state.set_state(AddProperty.media)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_media")]
    ])
    await message.answer("üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=kb)

@dp.message(AddProperty.media, F.photo | F.video)
async def collect_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media = data["media"]
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media.append(file_id)
    await state.update_data(media=media)
    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

@dp.callback_query(F.data == "finish_media")
async def finish_media(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddProperty.description)
    await callback.message.answer("üõè –ö–æ–º–Ω–∞—Ç—ã / —ç—Ç–∞–∂ / —ç—Ç–∞–∂–Ω–æ—Å—Ç—å:", reply_markup=ReplyKeyboardRemove())

@dp.message(AddProperty.description)
async def step_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProperty.condition)
    await message.answer("üß± –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")

@dp.message(AddProperty.condition)
async def step_condition(message: types.Message, state: FSMContext):
    await state.update_data(condition=message.text)
    await state.set_state(AddProperty.parking)
    await message.answer("üöó –ü–∞—Ä–∫–æ–≤–∫–∞ (–ü–æ–¥–∑–µ–º–Ω—ã–π/–ù–∞–∑–µ–º–Ω—ã–π/–ù–µ—Ç):")

@dp.message(AddProperty.parking)
async def step_parking(message: types.Message, state: FSMContext):
    await state.update_data(parking=message.text)
    await state.set_state(AddProperty.bathrooms)
    await message.answer("üöΩ –ö–æ–ª-–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:")

@dp.message(AddProperty.bathrooms)
async def step_bathrooms(message: types.Message, state: FSMContext):
    try:
        int(message.text)  # –í–∞–ª–∏–¥–∞—Ü–∏—è
        await state.update_data(bathrooms=message.text)
        await state.set_state(AddProperty.additions)
        await message.answer("‚úè –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤.")

@dp.message(AddProperty.additions)
async def step_additions(message: types.Message, state: FSMContext):
    await state.update_data(additions=message.text)
    await state.set_state(AddProperty.price)
    await message.answer("üí∞ –¶–µ–Ω–∞ (–≤ —á–∏—Å–ª–∞—Ö):")

@dp.message(AddProperty.price)
async def step_price(message: types.Message, state: FSMContext):
    try:
        float(message.text)  # –í–∞–ª–∏–¥–∞—Ü–∏—è
        await state.update_data(price=message.text)
        data = await state.get_data()
        preview = (
            f"*–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:*\n"
            f"üìç {data['location']}\n"
            f"üõè {data['description']}\n"
            f"üß± {data['condition']}\n"
            f"üöó {data['parking']}\n"
            f"üöΩ {data['bathrooms']}\n"
            f"‚úè {data['additions']}\n"
            f"üí∞ *{data['price']}*"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_object")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_object")]
        ])
        await state.set_state(AddProperty.confirm)
        await message.answer(preview, parse_mode="Markdown", reply_markup=kb)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —á–∏—Å–ª–∞—Ö.")

@dp.callback_query(F.data == "save_object")
async def save_object(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async with AsyncSessionLocal() as session:
        try:
            prop = Property(
                title=data["description"] or data["location"],
                description=data["description"],
                location=data["location"],
                condition=data["condition"],
                parking=data["parking"],
                bathrooms=int(data["bathrooms"]),
                additions=data["additions"],
                price=data["price"],
                media_group_id=",".join(data.get("media", [])),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –º–µ–¥–∏–∞
                created_by=callback.from_user.id
            )
            session.add(prop)
            await session.commit()

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
            message_text = (
                f"*–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç #{prop.id}*\n"
                f"üìç {data['location']}\n"
                f"üõè {data['description']}\n"
                f"üß± {data['condition']}\n"
                f"üöó {data['parking']}\n"
                f"üöΩ {data['bathrooms']}\n"
                f"‚úè {data['additions']}\n"
                f"üí∞ *{data['price']}*"
            )
            media = data.get("media", [])
            if media:
                from aiogram.types import InputMediaPhoto, InputMediaVideo
                media_group = []
                for file_id in media:
                    media_group.append(InputMediaPhoto(media=file_id) if file_id.startswith("Ag") else InputMediaVideo(media=file_id))
                await bot.send_media_group(chat_id=CHANNEL_USERNAME, media=media_group)
                await bot.send_message(chat_id=CHANNEL_USERNAME, text=message_text, parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=CHANNEL_USERNAME, text=message_text, parse_mode="Markdown")

            await callback.message.edit_text(f"‚úÖ –û–±—ä–µ–∫—Ç #{prop.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        except SQLAlchemyError as e:
            await session.rollback()
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {str(e)}")
    await state.clear()

@dp.callback_query(F.data == "cancel_object")
async def cancel_object(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ---------- EDIT PROPERTY ----------
@dp.callback_query(F.data.startswith("edit_property_"))
async def start_edit_property(callback: types.CallbackQuery, state: FSMContext):
    property_id = int(callback.data.split("_")[-1])
    async with AsyncSessionLocal() as session:
        prop = (await session.execute(select(Property).where(Property.id == property_id))).scalar_one_or_none()
        if not prop:
            await callback.message.edit_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if prop.created_by != callback.from_user.id and callback.from_user.id not in ADMIN_IDS:
            await callback.message.edit_text("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç.")
            return

    await state.update_data(property_id=property_id)
    await state.set_state(EditProperty.field)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è", callback_data="edit_field_location")],
        [InlineKeyboardButton(text="üõè –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
        [InlineKeyboardButton(text="üß± –°–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="edit_field_condition")],
        [InlineKeyboardButton(text="üöó –ü–∞—Ä–∫–æ–≤–∫–∞", callback_data="edit_field_parking")],
        [InlineKeyboardButton(text="üöΩ –°–∞–Ω—É–∑–ª—ã", callback_data="edit_field_bathrooms")],
        [InlineKeyboardButton(text="‚úè –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="edit_field_additions")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="üì∏ –ú–µ–¥–∏–∞", callback_data="edit_field_media")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_edit")]
    ])
    await callback.message.edit_text("‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_field_"))
async def edit_field(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[-1]
    await state.update_data(edit_field=field)
    await state.set_state(EditProperty.value)
    field_names = {
        "location": "–ª–æ–∫–∞—Ü–∏—é",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "condition": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        "parking": "–ø–∞—Ä–∫–æ–≤–∫—É",
        "bathrooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤",
        "additions": "–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        "price": "—Ü–µ–Ω—É",
        "media": "–º–µ–¥–∏–∞ (–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã)"
    }
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_names[field]}:", reply_markup=ReplyKeyboardRemove())
    await callback.answer()

@dp.message(EditProperty.value)
async def save_field(message: types.Message, state: FSMContext):
    data = await state.get_data()
    property_id = data["property_id"]
    field = data["edit_field"]

    async with AsyncSessionLocal() as session:
        prop = (await session.execute(select(Property).where(Property.id == property_id))).scalar_one_or_none()
        if not prop:
            await message.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            if field == "bathrooms":
                int(message.text)  # –í–∞–ª–∏–¥–∞—Ü–∏—è
            elif field == "price":
                float(message.text)  # –í–∞–ª–∏–¥–∞—Ü–∏—è
            elif field == "media":
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞.")
                return

            setattr(prop, field, message.text)
            await session.commit()
            await message.answer(f"‚úÖ –ü–æ–ª–µ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        except ValueError:
            await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}.")
            return
        except SQLAlchemyError:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@dp.message(EditProperty.value, F.photo | F.video)
async def save_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data["edit_field"] != "media":
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π.")
        return

    property_id = data["property_id"]
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id

    async with AsyncSessionLocal() as session:
        prop = (await session.execute(select(Property).where(Property.id == property_id))).scalar_one_or_none()
        if not prop:
            await message.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            media = prop.media_group_id.split(",") if prop.media_group_id else []
            media.append(file_id)
            prop.media_group_id = ",".join(media)
            await session.commit()
            await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        except SQLAlchemyError:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@dp.callback_query(F.data == "finish_edit")
async def finish_edit(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    property_id = data.get("property_id")
    async with AsyncSessionLocal() as session:
        prop = (await session.execute(select(Property).where(Property.id == property_id))).scalar_one_or_none()
        if not prop:
            await callback.message.edit_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        text = (
            f"*–û–±—ä–µ–∫—Ç #{prop.id}*\n"
            f"üìç {prop.location}\n"
            f"üõè {prop.description}\n"
            f"üß± {prop.condition}\n"
            f"üöó {prop.parking}\n"
            f"üöΩ {prop.bathrooms}\n"
            f"‚úè {prop.additions}\n"
            f"üí∞ *{prop.price}*"
        )
        await callback.message.edit_text(f"‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n{text}", parse_mode="Markdown",
                                         reply_markup=property_actions(prop.id, is_admin=callback.from_user.id in ADMIN_IDS))
    await state.clear()
    await callback.answer()

# ---------- DELETE PROPERTY (ADMIN) ----------
@dp.callback_query(F.data.startswith("delete_property_"))
@admin_only
async def delete_property(callback: types.CallbackQuery):
    property_id = int(callback.data.split("_")[-1])
    async with AsyncSessionLocal() as session:
        try:
            await session.execute(delete(Property).where(Property.id == property_id))
            await session.commit()
            await callback.message.edit_text(f"‚úÖ –û–±—ä–µ–∫—Ç #{property_id} —É–¥–∞–ª—ë–Ω!", reply_markup=admin_menu())
        except SQLAlchemyError:
            await session.rollback()
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    await callback.answer()

# ---------- ENTRY POINT ----------
if __name__ == "__main__":
    async def main():
        import models  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        await init_db()  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await dp.start_polling(bot)

    asyncio.run(main())
